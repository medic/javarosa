<!-- The JavaRosa build script is structured as follows:
     Modifiable properties are stored in the external build.properties file
     The classpath for external jars is defined in the Build taskdef

     NOTE: Binary Libraries (.zip is the convention in j2me) are declared
     seperately in the binaryLibraries property. Not on the classpath!

     The BuildPolish target is associated with building the jar/jad files

     All other non-test targets essentially modify properties associated with the
     Build target
-->
<project name="JavaRosa" default="LaunchEmulator">
	<!-- Main Target: Call to build the project -->
	<!-- This is the main work target, it actually builds the code -->
	<target name="BuildPolish" depends="init" description="This is the controller for the J2ME build process.">
		
		<!-- Since the <libraries> call won't filter, we have to do so ahead of time. -->
		<mkdir dir="${dir.lib.working}"/>
		<copy todir="${dir.lib.working}">
			<fileset dir="${dir.lib}">
				<exclude name=".svn"/>
			</fileset>
		</copy>
		
		<!-- A property containing the path to the preprocessed source files -->
		<property name="builtsource" value="${dir.build}/real/${device.identifier}/en/source/" />
		<buildPolish>
			<info name="${app.name}"
				version="${app.version}"
				description="${app.description}"
				vendorName="${app.vendor}"
				infoUrl="${app.infoUrl}"
				jarName="${app.jarName}"
				jarUrl="${deploy-url}${app.jarName}" copyright="" />

			<!-- selection of supported devices, set this in build.properties -->
			<deviceRequirements>
				<requirement name="Identifier" value="${device.identifier}" />
			</deviceRequirements>

			<!-- build settings -->
			<!-- 'menu' here designates that we're using the fullscreen Polish UI with native menus -->
			<!-- We should see if we can set these first two attributes as properties instead-->
			<build fullscreen="menu"
				usePolishGui="${javarosa.usepolishui}"
				workDir="${dir.work}"
				destDir="${dir.dist}">
				
				<libraries>
					<library dir="${dir.lib.working}" />
				</libraries>

				<!-- midlets definition -->
				<midlet class="${app.class}" name="${app.name}" />

				<!-- Code source files to include in compilation -->
				<!-- All source-level inclusions should be made here -->
				<sources>
					<source dir="${dir.src}"/>
				</sources>

				<!-- Build variables -->
				<variables includeAntProperties="true">
					<variable file="configuration/configuration.properties" />
				</variables>

				<!-- Resources that should be used in the Polish build (images, the polish.css file, etc) -->
				<resources
					dir="${dir.resources}"
					defaultexcludes="yes"
					excludes="readme.txt">
					<!-- Set the language for the strings in the application -->
					<localization>
						<locale name="en" />
					</localization>
				</resources>
				

				<!-- Whether to run the obfuscator, which makes reverse engineering the byte-code
					 more difficult, and compresses the built JAR -->
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="(noobfuscate or test) and not release">
					<parameter name="optimize" value="true" />
					<parameter name="printmapping" value="dist\obfuscation_mapping.txt" />
					
					<!-- none of the parameter names below can be the same, or else they will clobber previous parameters; hence the varied spacing -->
					<parameter name="keep,allowshrinking" value="!abstract class org.javarosa.core.model.* implements org.javarosa.core.model.IFormElement" />
					<parameter name="keep, allowshrinking" value="!abstract class org.javarosa.core.model.instance.* implements org.javarosa.core.model.IFormDataModel" />
					<parameter name="keep ,allowshrinking" value="!abstract class org.javarosa.core.model.data.* implements org.javarosa.core.model.data.IAnswerData" />
					<parameter name="keep,  allowshrinking" value="!abstract class org.javarosa.model.xform.* implements org.javarosa.core.model.IDataReference" />
					<parameter name="keep , allowshrinking" value="!abstract class org.javarosa.xpath.* implements org.javarosa.core.model.condition.IConditionExpr" />
					<parameter name="keep  ,allowshrinking" value="!abstract class org.javarosa.xpath.expr.* extends org.javarosa.xpath.expr.XPathExpression" />
					<parameter name="keep,   allowshrinking" value="!abstract class org.javarosa.communication.** implements org.javarosa.core.services.transport.ITransportDestination"/>
					<parameter name="keep " value="!abstract class org.javarosa.** implements org.javarosa.core.services.transport.IDataPayload"/>
					<parameter name="keep,    allowShrinking" value="!abstract class org.javarosa.** implements org.javarosa.core.services.transport.IDataPayload"/>
					<parameter name="keep  " value="!abstract class org.javarosa.** implements org.javarosa.core.data.IDataPointer"/>
					<parameter name="keep,     allowShrinking" value="!abstract class org.javarosa.** implements org.javarosa.core.data.IDataPointer"/>
					<parameter name="keep  ,   allowShrinking" value="class org.javarosa.model.GraphDataGroup"/>
				</obfuscator>

				<!-- log settings: only use debug setting when the test-property is true -->
				<debug if="test" showLogOnError="true" verbose="true" level="error">
					<filter pattern="org.celllife.clforms.*" level="debug" />
				</debug>
				<!-- Properties of the actual javac compiler -->
				<compiler debug="on" classpath="${polish.home}/import/enough-j2mepolish-client.jar:${polish.home}/import/fileconnection.jar:${polish.home}/import/j2me-lib_1.1.jar:${wtk.home}/lib/jsr082.jar:${polish.home}/import/nokia-ui.jar:${polish.home}/import/m3g.jar:${polish.home}/import/wmapi.jar"/>
				
				<!--postcompiler name="java5" /-->
				<!-- Add back when we're satisfied with everyone using it -->

			</build>

			<!-- execution of emulator(s) -->
			<!-- Target one: Run emulator and profiling tools if debugging is enabled -->
			<emulator wait="true" securityDomain="trusted" enableProfiler="true" enableMemoryMonitor="true" enableNetworkMonitor="false" if="debug">
				<!-- Enable the following line to test memory constraints on the device -->
				<!--parameter name="-Xheapsize" value="630000"/-->
				<!--parameter name="-Xheapsize" value="1750000"/-->
			</emulator>

			<!-- Target two: Run emulator only, with no profiling tools if debugging is disabled but testing is -->
			<emulator wait="true" trace="none" securityDomain="trusted" enableProfiler="false" enableMemoryMonitor="false" enableNetworkMonitor="false" if="test and not debug">
				<!-- Enable the following line to test memory constraints on the device -->
				<parameter name="-Xheapsize" value="2850000"/>
				<!--debugger port="6001" /-->
			</emulator>

		</buildPolish>
		<!-- Clean up our temporary directory -->
		<delete dir="${dir.lib.working}"/>
	</target>

	<!-- Main Target: Call to build the project and call up the emulator -->
	<!-- Builds the code and invokes the emulator -->
	<target name="LaunchEmulator" depends="enableEmulator,BuildPolish" description="invokes the emulator">
	</target>

	<!-- Main Target: Call to clean directories created by a build -->
	<target name="Clean" description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" />
	</target>
	
	<!-- Main Target: Call to clean the emulator's RMS -->
	<target name="CleanRMS" description="cleans the emulator's database">
		<delete dir="${j2mewtk.home}/appdb/DefaultColorPhone"/>
	</target>
	
	<!-- Main Target: Cleans, and then runs the build target -->
	<target name="BuildClean" description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml" depends="Clean, BuildPolish"/>
	
	<!-- Main Target: Cleans, enables all release configurations and runs the build target -->
	<target name="BuildRelease" description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml" depends="Clean, enableRelease, BuildPolish"/>

	<!-- Main Target: Cleans, and then runs the build target with the emulator -->
	<target name="BuildCleanRunEmulator" description="allows a clean build, and then launches the emulator" depends="Clean, enableEmulator, BuildPolish" />

	<!-- Main Target: Runs the build with all debug properties enabled -->
	<target name="LaunchEmulatorAndProfilers" description="debugs the project" depends="enableDebug, enableEmulator, BuildPolish" />

	<!-- Main Target: Builds project and runs j2mepolish Unit Tests on constructed jars -->
	<target name="RunJ2MEUnitTests" depends="supressOutput, disableObfuscator, enableTesting, BuildClean" description="Runs j2mepolish Unit Tests on constructed jars">
		<!--RunTestSuite suite="org.javarosa.formmanager.view.clforms.test.FormViewManagerTest"/-->
		<!--RunTestSuite suite="org.javarosa.formmanager.view.clforms.test.CLFormsWidgetsTest"/-->
		<RunTestSuite suite="org.javarosa.patient.test.SelectorTest"/>
		<RunTestSuite suite="org.javarosa.xpath.test.XPathParseTest"/>
		<RunTestSuite suite="org.javarosa.xpath.test.XPathEvalTest"/>
		<RunTestSuite suite="org.javarosa.xform.util.test.XFormAnswerDataSerializerTest"/>
		<RunTestSuite suite="org.javarosa.core.model.test.QuestionDefTest"/>
		<RunTestSuite suite="org.javarosa.core.util.test.NumericEncodingTest"/>
		<RunTestSuite suite="org.javarosa.core.util.test.PrefixTreeTest"/>
		<RunTestSuite suite="org.javarosa.core.model.utils.LocalizerTest"/>
		<RunTestSuite suite="org.javarosa.core.util.test.ExternalizableTest"/>
		<RunTestSuite suite="org.javarosa.demo.xform.test.DemoFormsTest"/>
		<RunTestSuite suite="org.javarosa.core.model.data.test.DateDataTests"/>
		<RunTestSuite suite="org.javarosa.core.model.data.test.IntegerDataTests"/>
		<RunTestSuite suite="org.javarosa.core.model.data.test.StringDataTests"/>
		<RunTestSuite suite="org.javarosa.core.model.data.test.TimeDataTests"/>
		<RunTestSuite suite="org.javarosa.core.model.data.test.SelectOneDataTests"/>
		<RunTestSuite suite="org.javarosa.core.model.data.test.SelectMultiDataTests"/>
		<RunTestSuite suite="org.javarosa.core.model.instance.test.QuestionDataElementTests"/>
		<RunTestSuite suite="org.javarosa.core.model.instance.test.QuestionDataGroupTests"/>
		<RunTestSuite suite="org.javarosa.user.model.test.UserTests"/>
		<!--RunTestSuite suite="org.javarosa.formmanager.test.ExtensionIntegrationTests"/-->
		<RunTestSuite suite="org.javarosa.core.model.utils.DateUtilsTests"/>

		<!-- add new test suites here -->
		<fail if="testresult.global">Unit Tests Failed!</fail>
	</target>
	
	<target name="CreateJavadoc" depends="BuildClean" description="generates javadoc and also UML Diagram">
		<mkdir dir="${dir.javadoc}"/>
	        <javadoc useexternalfile="yes" sourcepath="${builtsource}" packagenames="org.javarosa.*" destdir="${dir.javadoc}"
	        	classpathref="classpath.test" private="true">
	        	   <doclet name="org.umlgraph.doclet.UmlGraphDoc"
	        		  path="${dir.tools}/UMLGraph.jar">
	        	        <param name="-attributes" />
	        	        <param name="-operations" />
	        	        <param name="-qualify" />
	        	        <param name="-types" />
	        	        <param name="-visibility" />
	        	    </doclet>	
	        	    <link href="http://java.sun.com/javame/reference/apis/jsr030/"/>
	        	    <link href="http://java.sun.com/javame/reference/apis/jsr118/"/>
	        	    <link href="http://www.j2mepolish.org/javadoc/j2me/"/>
	        	  </javadoc>
		  <apply executable="dot" dest="${dir.documentation}" parallel="false">
		    <arg value="-Tpng"/>
		    <arg value="-o"/>
		     <targetfile/>
		     <srcfile/>
		     <fileset dir="${dir.documentation}" includes="*.dot"/>
		     <mapper type="glob" from="*.dot" to="*.png"/>
		  </apply>
	</target>
	
	

	<!-- Initialization for the build targets                    -->
	<target name="init">
		<!-- Disable the Emulator by default -->
		<property name="test" value="false" />
	</target>

	<target name="supressOutput">
		<property name="${debug.output}" value="none"/>
	</target>
	
	<target name="enableRelease">
		<property name="release" value="true"/>
	</target>

	<target name="disableObfuscator">
		<property name="noobfuscate" value="true"/>
	</target>
	<!-- Sets the 'debug' ANT variable to true -->
	<target name="enableDebug">
		<property name="debug" value="true" />
	</target>

	<!-- Enables the emulator by setting 'test' to be true, and setting a working directory -->
	<target name="enableEmulator">
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
	
	<target name="enableTesting">
		<property name="unittests" value="true"/>
	</target>

	<target name="build-xpath-parser">
		<ant antfile="../org.javarosa.xform/build.xml" target="build-xpath-parser" dir="../org.javarosa.xform" />
	</target>

	<!-- Macro: Runs a test suite, and sets testresult.global to be true on failure -->
	<macrodef name="RunTestSuite" description="Runs a test suite, and sets testresult.global to be true on failure">
		<attribute name="suite"/>
		<sequential>
			<!-- Note: The reason that we are using @{suite} as a property is because properties in ANT
			are immutable, and this is a unique identifier -->
		<java classname="j2meunit.textui.TestRunner" failonerror="false" fork="true" resultproperty="@{suite}">
							<classpath refid="classpath.test" />
							<arg value="@{suite}"/>
				</java>
		<condition property="testresult.global">
					<not>
						<equals arg1="${@{suite}}" arg2="0"/>
				 	</not>
				</condition>
		</sequential>
	</macrodef>

	<macrodef name="propertycopy">
	  <attribute name="name"/>
	  <attribute name="from"/>
	  <sequential>
	    <property name="@{name}" value="${@{from}}"/>
	  </sequential>
	</macrodef>

	<!-- import user specific properties                          -->
	<property file="${basedir}/build.properties" />

	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

	<property name="TALK" value="true" />

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="buildPolish" classname="de.enough.polish.ant.PolishTask" classpath="${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar:${polish.home}/lib/j2me-lib_1.1.jar:${polish.home}/lib/microewt_0.92.jar:${polish.home}/lib/microEWT-Examples.jar:${wtk.home}/lib/jsr082.jar:${polish.home}/import/nokia-ui.jar:${polish.home}/import/m3g.jar" />
	<path id="classpath.base">
	</path>
	

	<!-- Note that most of this testing code was here to test our auto-integration tester, and isn't actually
	     usable for testing J2ME code -->
	<!-- The classpath that should be used for tests -->
	<path id="classpath.test">
      <pathelement location="${dir.dist}/${app.jarName}"/>
	  <!--pathelement location="${dir.test}" /-->
	  <pathelement location="${dir.lib}/j2meunit-javarosa.jar" />
	  <pathelement location="${wtk.home}/lib/wma11.jar"/>
	  <pathelement location="${wtk.home}/lib/midpapi21.jar"/>
	  <path refid="classpath.base" />
	</path>
</project>
