/** 
  * This polish.css file contains all
  * basic design information about this project.
  * It can be customized for specific devices
  * or device groups by putting it in the 
  * appropriate sub-folder or by using preprocessing.
  *
  * If you want to adjust a design for all
  * Nokia devices, define it in "resources/Nokia/polish.css"
  * and so on. Only new and different settings
  * need to be specified in such polish.css files, this means that
  * styles inherit all attributes of their "parent" style.
  *
  * For customizations of the base style, use 
  * resources/customization1/polish.css, for example.
  */

/**
  * the colors which are defined in
  * the colors section can later be referenced.
  * This makes changes easy, since the color
  * just needs to be changed in one position.
  * Even default colors (like blue, green, lime, etc)
  * can be changed here. 
  *
  * Tip: use names that describe their meaning, not names that describe the color:
  * Good name: backgroundColor
  * Bad name:  lightGreen
  * This allows you to change the design later onwards without ending up with
  * color definitions like "lightGreen: red;".
  */
colors {
	fontColor: rgb( 30, 85, 86 );
	focusedFontColor: #000;
	bgColor:  #eee;
	focusedBgColor:  #fff;
	borderColor: fontColor;
	focusedBorderColor: focusedFontColor;	
}

/** 
  * When you use the same background several times,
  * you can design it in the backgrounds section.
  * In this case only one instance of the background
  * is used, which reduces the memory footprint.
  */
backgrounds {
	/* sample:
	screenBackground {
		color: bgColor;
		image: url( bg.png );
		anchor: top | left;
		top: menu;
	}
	*/
}

/** 
  * When you use the same border several times,
  * you can design it in the borders section.
  * In this case only one instance of the border
  * is used, which reduces the memory footprint.
  */
borders {
	/* sample:
	focusedBorder {
		type: round-rect;
		color: focusedBorderColor;
	}
	*/
}


/**
  * The focused style is a predefined style which
  * is used by lists, forms, choice-groups and so on.
  * This style will be used for highlighting the currently
  * focused item.
  * You can specify a specialized focused style for
  * any screen or even element by specifying the
  * "focused-style" CSS attribute:
  * .textInput {
  *    background-color: white;
  *    focused-style: .textInputFocused;
  * }
  * .textInputFocused extends focused {
  *    background-color: red;
  * }
  */
focused {
	margin: 1;  /* the margin which is used unless a specific margin is specified. margin defaults to 0. */
	/* other margins:
	margin-left: 2;
	margin-right: 2;
	margin-top: 2;
	margin-bottom: 2;
	*/	
	margin: 3; /* the margin which is used unless a specific margin is specified. margin defaults to 1. */
	/* other paddings:
	padding-left: 2;
	padding-right: 2;
	padding-horizontal: 2;
	padding-top: 2;
	padding-bottom: 2;
	padding-vertical: 2; 
	*/	
	background {
		type: round-rect;
		arc: 4;
		color: focusedBgColor;
		border-color: focusedBorderColor;
		border-width: 2;
	}
	font {
		style: bold;
		color: focusedFontColor;
		size: small;
	}
	layout: expand | left;	
}


/**
  * The title style is a predefined style which is used
  * for all screen-titles.
  */
title {
	padding: 2;
	font-face: proportional;
	font-size: large;
	font-style: bold;
	font-color: focusedFontColor;
	background-color: bgColor;
	border: none;
	layout: horizontal-center | horizontal-expand;
	//#if polish.midp2
		text-effect: vertical-gradient;
		text-vertical-gradient-start-color: #ddd;
		text-vertical-gradient-end-color: #000;		
	//#endif
}

/*************   SCROLL BAR   *************/
/* You need to activate the scrollbar by setting the "polish.useScrollBar" variable to "true" in your build.xml script. */
scrollbar {
	scrollbar-slider-color: #333;
	scrollbar-slider-width: 3;
}

/*************   MENU BAR     *************/
/* You need to activate the extended menubar that allows this finetuned design by setting the 
   "polish.MenuBar.useExtendedMenuBar" variable to "true" in your build.xml script. */

menubar
{
	margin: 0;
	padding-top: 3;
	padding: 2;
	background-color: bgColor;
}

menu {
	margin-left: 2;
	margin-right: 2;
	min-width: 120;
	padding: 2;
	background {
		type: round-rect;
		color: focusedBgColor;
		border-width: 2;
		border-color: bgColor;
	}
}

/** Style for the first layer of subcommands: **/
menu1 extends menu {
	background-color: argb(150, 255, 255, 0 );
	background-type: simple;
      layout: right;
      margin-bottom: 4;
      margin-right: 4;
}


/**
  * The menuItem style is a predefined style
  * for the actual commands in a fullscreen-menu.
  * When the menuItem style is not defined,
  * the menu style will be used instead. 
  */
menuItem {
	margin-top: 2;
	padding: 2;
	padding-left: 5;
	font {
		color: fontColor;
		size: medium;
		style: bold;
	}
	layout: left;
	/**
	 * Yes, it's possible to use preprocessing within CSS files. Use any preprocessing
	 * variables like polish.midp2 or polish.api.nokia-ui. You can also access resource
	 * information using these property functions:
	 * - exists( resourcename ): checks whether a resource is defined for the current target device
	 * - imagewidth( imagename ): retrieves the width of the given image
	 * - imageheight( imagename ): retrieves the height of the given image
	 */
	//#if ${ exists( arrowRight.png ) }
		command-child-indicator: url(arrowRight.png);
	//#else
		command-child-indicator-color: blue;
		command-child-indicator-width: 8;
		command-child-indicator-height: 10;
	//#endif
}

/**
  * This is a custom style for selected
  * menu items. It is used, because it has
  * been defined in the menu style. 
  */
.menuFocused extends .menuItem {
	background-color: bgColor;
	font-color: focusedFontColor;
	layout: left | horizontal-expand;
}

leftcommand
{
	margin: 0;
    margin-horizontal: 10;
	padding-top: 3;
	padding-bottom: 0;
	font-color: black;
	font-style: bold;
	layout: left;
}

rightcommand extends leftcommand
{
	layout: right;
}




